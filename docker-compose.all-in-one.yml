# All-in-one combined stack (baseline inter-service connectivity)
# NOTE: This is a generated consolidated compose for experimentation.
# It intentionally keeps config basic (lean mode) and omits advanced hardening.
# Use profiles to control GPU, monitoring, and optional components.

name: localai-all

volumes:
  n8n_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  caddy-data:
  caddy-config:
  valkey-data:
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
  langfuse_minio_data:
  supabase_db_data:
  supabase_storage_data:
  supabase_functions:
  supabase_analytics_db:
  grafana-data:
  prometheus-data:

networks:
  backend:
  public:

x-common-env: &common-env
  BASE_DOMAIN: ${BASE_DOMAIN:-localhost}

x-ollama: &ollama
  image: ollama/ollama:latest
  restart: unless-stopped
  expose: ["11434"]
  volumes:
    - ollama_storage:/root/.ollama
  networks: [backend]

x-n8n: &n8n
  image: n8nio/n8n:latest
  restart: unless-stopped
  expose: ["5678"]
  environment:
    DB_TYPE: postgresdb
    DB_POSTGRESDB_HOST: postgres
    DB_POSTGRESDB_USER: postgres
    DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
    DB_POSTGRESDB_DATABASE: postgres
    N8N_DIAGNOSTICS_ENABLED: "false"
    N8N_PERSONALIZATION_ENABLED: "false"
    N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
    N8N_USER_MANAGEMENT_JWT_SECRET: ${N8N_USER_MANAGEMENT_JWT_SECRET}
  volumes:
    - n8n_storage:/home/node/.n8n
  networks: [backend]
  depends_on:
    - postgres

services:
  # Core Databases / Data Infra
  postgres:
    image: postgres:${POSTGRES_VERSION:-15}
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [backend]

  redis:
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    expose: ["6379"]
    volumes:
      - valkey-data:/data
    networks: [backend]

  qdrant:
    image: qdrant/qdrant
    restart: unless-stopped
    expose: ["6333", "6334"]
    volumes:
      - qdrant_storage:/qdrant/storage
    networks: [backend]

  neo4j:
    image: neo4j:latest
    restart: unless-stopped
    expose: ["7474", "7687"]
    volumes:
      - ./neo4j/logs:/logs
      - ./neo4j/config:/config
      - ./neo4j/data:/data
      - ./neo4j/plugins:/plugins
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH:-neo4j/your_password}
    networks: [backend]

  # Supabase core (minimal subset)
  supabase-kong:
    image: kong:2.8.1
    restart: unless-stopped
    expose: ["8000"]
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
    volumes:
      - ./supabase/docker/volumes/api/kong.yml:/home/kong/kong.yml:ro
    depends_on:
      - supabase-analytics
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/"]
      interval: 5s
      timeout: 5s
      retries: 3

  supabase-auth:
    image: supabase/gotrue:v2.177.0
    restart: unless-stopped
    expose: ["9999"]
    environment:
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost}
    depends_on:
      - postgres
      - supabase-analytics
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 5s
      timeout: 5s
      retries: 3

  supabase-rest:
    image: postgrest/postgrest:v12.2.12
    restart: unless-stopped
    expose: ["3000"]
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      PGRST_DB_SCHEMAS: public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgres
      - supabase-analytics
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 5s
      timeout: 5s
      retries: 3

  supabase-realtime:
    image: supabase/realtime:v2.34.47
    restart: unless-stopped
    expose: ["4000"]
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USER: postgres
      DB_NAME: postgres
      API_JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgres
    networks: [backend]
    healthcheck:
      test: ["CMD", "curl", "-sSfL", "--head", "-o", "/dev/null", "http://localhost:4000/api/tenants/realtime-dev/health"]
      interval: 5s
      timeout: 5s
      retries: 3

  supabase-storage:
    image: supabase/storage-api:v1.25.7
    restart: unless-stopped
    expose: ["5000"]
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
    depends_on:
      - supabase-rest
    networks: [backend]

  supabase-imgproxy:
    image: darthsim/imgproxy:v3.8.0
    restart: unless-stopped
    expose: ["5001"]
    networks: [backend]

  supabase-meta:
    image: supabase/postgres-meta:v0.91.0
    restart: unless-stopped
    expose: ["8080"]
    environment:
      PG_META_DB_HOST: postgres
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    networks: [backend]

  supabase-edge-functions:
    image: supabase/edge-runtime:v1.67.4
    restart: unless-stopped
    expose: ["54321"]
    volumes:
      - ./supabase/docker/volumes/functions:/home/deno/functions:Z
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      SUPABASE_DB_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
    depends_on:
      - supabase-kong
    networks: [backend]

  supabase-analytics:
    image: supabase/logflare:1.14.2
    restart: unless-stopped
    expose: ["4000"]
    environment:
      DB_USERNAME: postgres
      DB_DATABASE: postgres
      DB_HOSTNAME: postgres
      DB_PORT: 5432
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      LOGFLARE_SINGLE_TENANT: "true"
      LOGFLARE_SUPABASE_MODE: "true"
    depends_on:
      - postgres
    networks: [backend]

  # Supabase Studio (admin UI)
  supabase-studio:
    image: supabase/studio:2025.06.30-sha-6f5982d
    restart: unless-stopped
    expose: ["3000"]
    environment:
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_PUBLIC_URL: http://supabase-kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      AUTH_JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - supabase-kong
      - supabase-analytics
    networks: [backend]

  # Supabase Postgres (dedicated DB for supabase features; still sharing external 'postgres' for other apps)
  supabase-db:
    image: supabase/postgres:15.8.1.060
    restart: unless-stopped
    volumes:
      - ./supabase/docker/volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
      - ./supabase/docker/volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
      - ./supabase/docker/volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
      - ./supabase/docker/volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
      - ./supabase/docker/volumes/db/data:/var/lib/postgresql/data:Z
      - ./supabase/docker/volumes/db/_supabase.sql:/docker-entrypoint-initdb.d/migrations/97-_supabase.sql:Z
      - ./supabase/docker/volumes/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
      - ./supabase/docker/volumes/db/pooler.sql:/docker-entrypoint-initdb.d/migrations/99-pooler.sql:Z
      - supabase_db_data:/var/lib/postgresql-custom
    environment:
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD:-${POSTGRES_PASSWORD}}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY:-3600}
      PGPORT: 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [backend]

  # Vector log forwarder (optional; minimal config using upstream vector volume)
  supabase-vector:
    image: timberio/vector:0.28.1-alpine
    restart: unless-stopped
    volumes:
      - ./supabase/docker/volumes/logs/vector.yml:/etc/vector/vector.yml:ro,z
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      LOGFLARE_PUBLIC_ACCESS_TOKEN: ${LOGFLARE_PUBLIC_ACCESS_TOKEN:-logflare_public}
    command: ["--config", "/etc/vector/vector.yml"]
    networks: [backend]
  # Langfuse subset
  langfuse-clickhouse:
    image: clickhouse/clickhouse-server
    restart: unless-stopped
    expose: ["8123"]
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
    networks: [backend]

  langfuse-minio:
    image: minio/minio
    restart: unless-stopped
    command: server --address ":9000" --console-address ":9001" /data
    expose: ["9000", "9001"]
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - langfuse_minio_data:/data
    networks: [backend]

  langfuse-worker:
    image: langfuse/langfuse-worker:3
    restart: unless-stopped
    expose: ["3030"]
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      REDIS_HOST: redis
    depends_on:
      - postgres
      - langfuse-clickhouse
      - langfuse-minio
      - redis
    networks: [backend]

  langfuse-web:
    image: langfuse/langfuse:3
    restart: unless-stopped
    expose: ["3000"]
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      REDIS_HOST: redis
    depends_on:
      - langfuse-worker
    networks: [backend]

  # Application Layer
  n8n:
    <<: *n8n

  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    expose: ["3001"]
    environment:
      FLOWISE_USERNAME: ${FLOWISE_USERNAME}
      FLOWISE_PASSWORD: ${FLOWISE_PASSWORD}
      PORT: 3001
    entrypoint: /bin/sh -c "sleep 3; flowise start"
    networks: [backend]

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    expose: ["8080"]
    volumes:
      - open-webui:/app/backend/data
    networks: [backend]

  searxng:
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    expose: ["8080"]
    environment:
      SEARXNG_BASE_URL: https://${SEARXNG_HOSTNAME:-localhost}/
    networks: [backend]

  portal:
    build: ./portal
    expose: ["8085"]
    environment:
      PORT: 8085
      N8N_HOSTNAME: ${N8N_HOSTNAME}
      WEBUI_HOSTNAME: ${WEBUI_HOSTNAME}
      FLOWISE_HOSTNAME: ${FLOWISE_HOSTNAME}
      SUPABASE_HOSTNAME: ${SUPABASE_HOSTNAME}
      LANGFUSE_HOSTNAME: ${LANGFUSE_HOSTNAME}
      OLLAMA_HOSTNAME: ${OLLAMA_HOSTNAME}
      NEO4J_HOSTNAME: ${NEO4J_HOSTNAME}
      SEARXNG_HOSTNAME: ${SEARXNG_HOSTNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      ANON_KEY: ${ANON_KEY}
    networks: [backend]

  # Ollama variants (only CPU by default; GPU profiles optional)
  ollama-cpu:
    <<: *ollama
    profiles: ["cpu"]

  ollama-gpu:
    <<: *ollama
    profiles: ["gpu-nvidia"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    <<: *ollama
    image: ollama/ollama:rocm
    profiles: ["gpu-amd"]
    devices:
      - /dev/kfd
      - /dev/dri

  # Monitoring (opt-in)
  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:latest
    restart: unless-stopped
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    expose: ["9090"]
    networks: [backend]

  grafana:
    profiles: ["monitoring"]
    image: grafana/grafana:latest
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    expose: ["3002"]
    depends_on:
      - prometheus
    networks: [backend]

  # Lean reverse proxy example using Caddy minimal (mount lean file manually if desired)
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./caddy-addon/Caddyfile.lean:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    environment:
      N8N_HOSTNAME: ${N8N_HOSTNAME:-n8n.localhost}
      WEBUI_HOSTNAME: ${WEBUI_HOSTNAME:-openwebui.localhost}
      FLOWISE_HOSTNAME: ${FLOWISE_HOSTNAME:-flowise.localhost}
      SUPABASE_HOSTNAME: ${SUPABASE_HOSTNAME:-supabase.localhost}
      OLLAMA_HOSTNAME: ${OLLAMA_HOSTNAME:-ollama.localhost}
      SEARXNG_HOSTNAME: ${SEARXNG_HOSTNAME:-searxng.localhost}
      LANGFUSE_HOSTNAME: ${LANGFUSE_HOSTNAME:-langfuse.localhost}
      NEO4J_HOSTNAME: ${NEO4J_HOSTNAME:-neo4j.localhost}
      PORTAL_HOSTNAME: ${PORTAL_HOSTNAME:-portal.localhost}
    networks: [backend, public]

# End of all-in-one compose
